syntax = "proto3";

option go_package = "pb";

service BananaService {
  rpc NewGame(NewGameRequest) returns (NewGameResponse);
  rpc ListGames(ListGamesRequest) returns (ListGamesResponse);
  rpc StartGame(StartGameRequest) returns (StartGameResponse);
  rpc JoinGame(JoinGameRequest) returns (stream GameUpdate);
  rpc UpdateBoard(UpdateBoardRequest) returns (UpdateBoardResponse);
  rpc Dump(DumpRequest) returns (DumpResponse);
}

message NewGameRequest {
  // What to name the game.
  string name = 1;
}

message NewGameResponse {
  // The unique identifier for the game.
  string id = 1;
}

message ListGamesRequest { }

message ListGamesResponse {
  repeated Game games = 1;
}

message Game {
  string id = 1;
  string name = 2;
  enum Status {
    UNKNOWN = 0;
    WAITING_FOR_PLAYERS = 1;
    IN_PROGRESS = 2;
    FINISHED = 3;
  }
  Status status = 3;
  int32 player_count = 4;
}

message StartGameRequest {
  // The unique identifier for the game to start.
  string id = 1;
}

message StartGameResponse { }

message JoinGameRequest {
  // The unique identifier for the game to join.
  string id = 1;
  // The name of the player joining the game.
  string name = 2;
  // This can be set if a player is re-joining a game they're already in, it'll
  // attach the user to the same session.
  string player_id = 3;
}

message GameUpdate {
  oneof update {
    // A YouUpdate only occurs once, when you join the game successfully.
    YouUpdate you_update = 1;
    // Player updates happen when people join or leave a game.
    PlayerUpdate player_update = 2;
    // Status updates happen when a game starts or ends.
    StatusUpdate status_update = 3;
    // Tile updates happen whenever the player's set of tiles changes, like at
    // the start of a game, when someone peels, or when the player dumps.
    TileUpdate tile_update = 4;
    // Board updates happen when a player refreshes and joins a game thats
    // already underway.
    BoardUpdate board_update = 5;
    // Move updates happen when someone places a word down.
    MoveUpdate move_update = 6;
  }
}

message YouUpdate {
  string your_id = 1;
}

message PlayerUpdate {
  repeated Player players = 1;
  int32 remaining_tiles = 2;
}

message Player {
  string name = 1;
  int32 tiles_in_hand = 2;
  int32 tiles_in_bunch = 3;
}

message StatusUpdate {
  enum Status {
    UNKNOWN = 0;
    WAITING = 1;
    GAME_STARTED = 2;
    GAME_OVER = 3;
  }
  Status status = 1;
}

message TileUpdate {
  enum Event {
    UNKNOWN = 0;
    SPLIT = 1;
    PEEL = 2;
    DUMP = 3;
    JOIN = 4;
  }
  // Why we're updating our tile set.
  Event event = 1;
  // The player who caused this to occur, mainly for UI purposes. For a dump,
  // it's always the name of this player. For a peel, it's the player who
  // peeled.
  string player = 2;
  Tiles all_tiles = 3;
}

message BoardUpdate {
  Board board = 1;
}

message MoveUpdate {
  // The name of the player who made the move.
  string player = 1;
  // The word the player played.
  string word = 2;
}

message Tiles {
  // Tiles are just lists of letters
  repeated string letters = 1;
}

message DumpRequest {
  // The unique identifier for the game you're dumping in.
  string id = 1;
  // The unique identifier for the player dumping.
  string player_id = 2;
  // The letter that is being dumped.
  string letter = 3;
}

message DumpResponse { }

message UpdateBoardRequest {
  // The unique identifier for the game you're placing in.
  string id = 1;
  // The unique identifier for the player peeling.
  string player_id = 2;
  Board board = 3;
  // An optional word to include, to be shared with other players.
  Word latest_word = 4;
}

message Board {
  repeated Word words = 1;
}

message Word {
  string text = 1;
  enum Orientation {
    UNKNOWN = 0;
    HORIZONTAL = 1;
    VERTICAL = 2;
  }
  Orientation orientation = 2;
  // The x-position of the top-left letter on the board.
  int32 x = 3;
  // The y-position of the top-left letter on the board.
  int32 y = 4;
}

message CharLocs {
  string text = 1;
  repeated CharLoc locs = 2;
}

message CharLoc {
  string letter = 1;
  int32 x = 2;
  int32 y = 3;
}

message UpdateBoardResponse {
  repeated CharLocs invalid_words = 1;
  repeated string unused_letters = 2;
  bool detached_board = 3;
}
