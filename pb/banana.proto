syntax = "proto3";

option go_package = "pb";

service BananaService {
  rpc Register(RegisterRequest) returns (RegisterResponse);

  rpc NewGame(NewGameRequest) returns (NewGameResponse);
  rpc ListGames(ListGamesRequest) returns (ListGamesResponse);
  rpc StreamGames(ListGamesRequest) returns (stream GamesList);
  rpc StartGame(StartGameRequest) returns (StartGameResponse);

  rpc JoinGame(JoinGameRequest) returns (stream GameUpdate);
  rpc StreamLogs(StreamLogsRequest) returns (stream LogEntry);

  rpc UpdateBoard(UpdateBoardRequest) returns (UpdateBoardResponse);
  rpc Dump(DumpRequest) returns (DumpResponse);

  rpc Spectate(SpectateRequest) returns (stream SpectateUpdate);
}

message RegisterRequest {
  // What the users name should be. Must be unique within the system, because
  // why not?
  string name = 1;
}

message RegisterResponse {
  string player_id = 1;
  string token = 2;
}

message NewGameRequest {
  // What to name the game.
  string name = 1;
}

message NewGameResponse {
  // The unique identifier for the game.
  string id = 1;
}

message ListGamesRequest { }

message ListGamesResponse {
  repeated Game games = 1;
}

message GamesList {
  repeated Game games = 1;
}

enum GameStatus {
  UNKNOWN = 0;
  WAITING_FOR_PLAYERS = 1;
  IN_PROGRESS = 2;
  FINISHED = 3;
}

message Game {
  string id = 1;
  string name = 2;
  GameStatus status = 3;
  int32 player_count = 4;
  string creator_id = 5;
}

message StartGameRequest {
  // The unique identifier for the game to start.
  string id = 1;
}

message StartGameResponse { }

message JoinGameRequest {
  // The unique identifier for the game to join.
  string game_id = 1;
  // The ID of the player joining the game.
  string player_id = 3;
}

message GameUpdate {
  oneof update {
    // Sent once when you join the game, tells you the current status of the
    // game and players. All other updates happen live afterwards.
    CurrentStatus current_status = 1;

    // Player updates happen when a player joins the game.
    PlayerUpdate player_update = 2;

    // Status updates happen when a game starts or ends.
    GameStarted game_started = 3;
    GameEnded game_ended = 4;

    // Tile updates happen whenever the player's set of tiles changes, like at
    // the start of a game or when someone peels, but not when the player
    // dumps.
    SelfTileUpdate self_tile_update = 5;
    OtherTileUpdates other_tile_update = 6;
  }
}

message CurrentStatus {
  string your_id = 1;
  repeated Player players = 2;
  int32 remaining_tiles = 3;
  Board board = 4;
  Tiles all_tiles = 5;
  GameStatus status = 6;
}

message Tiles {
  // Tiles are just lists of letters
  repeated string letters = 1;
}

message PlayerUpdate {
  Player player = 1;
}

message Player {
  string id = 1;
  string name = 2;
  int32 tiles_in_hand = 3;
  int32 tiles_in_board = 4;
}

message GameStarted { }

message GameEnded {
  repeated Player standings = 1;
}

message SelfTileUpdate {
  Tiles all_tiles = 1;
  bool from_other_peel = 2;
}

message OtherTileUpdates {
  repeated OtherTileUpdate updates = 1;
  int32 remaining_tiles = 2;
}

message OtherTileUpdate {
  string player_id = 1;
  int32 tiles_in_hand = 2;
  int32 tiles_in_board = 3;
}

message StreamLogsRequest {
  string game_id = 1;
  string player_id = 2;
}

message LogEntry {
  oneof event {
    PlayerMove player_move = 1;
    PlayerDump player_dump = 2;
    PlayerPeel player_peel = 3;
  }
}

message PlayerMove {
  string player_id = 1;
  string player_name = 2;
  string word = 3;
  bool word_valid = 4;
  bool board_connected = 5;
}

message PlayerDump {
  string player_id = 1;
  string player_name = 2;
}

message PlayerPeel {
  string player_id = 1;
  string player_name = 2;
}

message SpectateRequest {
  // The unique identifier for the game to spectate.
  string id = 1;
}

message SpectateUpdate {
  string player_id = 1;
  string player_name = 2;
  Board board = 3;
  repeated CharLocs invalid_words = 4;
  bool detached_board = 5;
}

message DumpRequest {
  // The unique identifier for the game you're dumping in.
  string id = 1;
  // The unique identifier for the player dumping.
  string player_id = 2;
  // The letter that is being dumped.
  string letter = 3;
}

message DumpResponse {
  Tiles all_tiles = 1;
}

message UpdateBoardRequest {
  // The unique identifier for the game you're placing in.
  string id = 1;
  // The unique identifier for the player peeling.
  string player_id = 2;
  Board board = 3;
  // An optional word to include, to be shared with other players.
  Word latest_word = 4;
}

message Board {
  repeated Word words = 1;
}

message Word {
  string text = 1;
  enum Orientation {
    UNKNOWN = 0;
    HORIZONTAL = 1;
    VERTICAL = 2;
  }
  Orientation orientation = 2;
  // The x-position of the top-left letter on the board.
  int32 x = 3;
  // The y-position of the top-left letter on the board.
  int32 y = 4;
}

message CharLocs {
  string text = 1;
  repeated CharLoc locs = 2;
}

message CharLoc {
  string letter = 1;
  int32 x = 2;
  int32 y = 3;
}

message UpdateBoardResponse {
  repeated CharLocs invalid_words = 1;
  repeated string unused_letters = 2;
  bool detached_board = 3;
}
